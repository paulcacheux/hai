program = { SOI ~ declaration+ ~ &EOI }

declaration = { function_declaration }
function_declaration = { "fn" ~ identifier ~ "(" ~ parameter_list ~ ")" ~ ( "->" ~ ty )? ~ block_statement }

statement = { let_statement | expression_statement | block_statement }
block_statement = { "{" ~ statement* ~ "}" }

let_statement = { "let" ~ identifier ~ "=" ~ expression ~ ";" }
expression_statement = { expression ~ ";" }

expression = { term ~ ( ( star | slash | plus | minus ) ~ term )* }

star = @{ "*" }
slash = @{ "/" }
plus = @{ "+" }
minus = @{ "-" }

term = { paren_expression | function_call | leaf }
paren_expression = { "(" ~ expression ~ ")" }
leaf = { integer | identifier }
function_call = { identifier ~ "(" ~ expression_list ~ ")" }

expression_list = { (expression ~ ( "," ~ expression )* )? }
parameter_list = { (parameter ~ ( "," ~ parameter )* )? }
parameter = { identifier ~ ":" ~ ty }

identifier = @{ ( ASCII_ALPHA | "_" ) ~ ( ASCII_ALPHANUMERIC | "_" )* }
integer = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

ty = { "int" | "bool" | unit_ty }
unit_ty = { "(" ~ ")" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
block_comment = _{ "/*" ~ ( block_comment | !"*/" ~ ANY )* ~ "*/" }
line_comment = _{ "//" ~ (!NEWLINE ~ ANY)* }
COMMENT = _{ block_comment | line_comment }